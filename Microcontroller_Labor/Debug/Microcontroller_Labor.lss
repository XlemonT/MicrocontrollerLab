
Microcontroller_Labor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000013c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000013c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000016c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000877  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006fb  00000000  00000000  00000a6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000311  00000000  00000000  0000116a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  0000147c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000042b  00000000  00000000  000014f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000008d  00000000  00000000  0000191f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000019ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 57 00 	call	0xae	; 0xae <main>
  64:	0c 94 72 00 	jmp	0xe4	; 0xe4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <_ZN11LedBarMeterC1Ev>:
LedBarMeter::LedBarMeter()
{
} //LedBarMeter

// default destructor
LedBarMeter::~LedBarMeter()
  6c:	08 95       	ret

0000006e <_ZN11LedBarMeter11SetBarMeterEi>:
} //~LedBarMeter


void LedBarMeter::SetBarMeter(int count)
{
	PORTA |= 0b1111 << 4; // set the upper nibble to all 1s
  6e:	8b b3       	in	r24, 0x1b	; 27
  70:	80 6f       	ori	r24, 0xF0	; 240
  72:	8b bb       	out	0x1b, r24	; 27
	
	if (count < 51) {
  74:	63 33       	cpi	r22, 0x33	; 51
  76:	71 05       	cpc	r23, r1
  78:	24 f4       	brge	.+8      	; 0x82 <_ZN11LedBarMeter11SetBarMeterEi+0x14>
		PORTA &= ~(~0b0000 << 4);
  7a:	8b b3       	in	r24, 0x1b	; 27
  7c:	8f 70       	andi	r24, 0x0F	; 15
  7e:	8b bb       	out	0x1b, r24	; 27
  80:	08 95       	ret
	}
	else if (count < 102) {
  82:	66 36       	cpi	r22, 0x66	; 102
  84:	71 05       	cpc	r23, r1
  86:	24 f4       	brge	.+8      	; 0x90 <_ZN11LedBarMeter11SetBarMeterEi+0x22>
		PORTA &= ~(~0b0001 << 4);
  88:	8b b3       	in	r24, 0x1b	; 27
  8a:	8f 71       	andi	r24, 0x1F	; 31
  8c:	8b bb       	out	0x1b, r24	; 27
  8e:	08 95       	ret
	}
	else if (count < 153) {
  90:	69 39       	cpi	r22, 0x99	; 153
  92:	71 05       	cpc	r23, r1
  94:	24 f4       	brge	.+8      	; 0x9e <_ZN11LedBarMeter11SetBarMeterEi+0x30>
		PORTA &= ~(~0b0011 << 4);
  96:	8b b3       	in	r24, 0x1b	; 27
  98:	8f 73       	andi	r24, 0x3F	; 63
  9a:	8b bb       	out	0x1b, r24	; 27
  9c:	08 95       	ret
	}
	else if (count < 204) {
  9e:	6c 3c       	cpi	r22, 0xCC	; 204
  a0:	71 05       	cpc	r23, r1
  a2:	14 f4       	brge	.+4      	; 0xa8 <_ZN11LedBarMeter11SetBarMeterEi+0x3a>
		PORTA &= ~(~0b0111 << 4);
  a4:	df 98       	cbi	0x1b, 7	; 27
  a6:	08 95       	ret
	}
	else {
		PORTA &= ~(~0b1111 << 4);
  a8:	8b b3       	in	r24, 0x1b	; 27
  aa:	8b bb       	out	0x1b, r24	; 27
  ac:	08 95       	ret

000000ae <main>:
#include "PortControl.h"
#include "LedBarMeter.h"


int main(void)
{
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
  b2:	1f 92       	push	r1
  b4:	cd b7       	in	r28, 0x3d	; 61
  b6:	de b7       	in	r29, 0x3e	; 62
	// set LEDs to output
	DDRA = 0xF0; // set upper nibble to write, lower nibble to read
  b8:	80 ef       	ldi	r24, 0xF0	; 240
  ba:	8a bb       	out	0x1a, r24	; 26
	//PORTA |= (1 << PA0); // set Port A's Pin 0 to read
	
	LedBarMeter led_bar = LedBarMeter();
  bc:	ce 01       	movw	r24, r28
  be:	01 96       	adiw	r24, 0x01	; 1
  c0:	0e 94 36 00 	call	0x6c	; 0x6c <_ZN11LedBarMeterC1Ev>
	PORTA |= (1 << 2); // make LED 3 light up to prove that LED bar does not interfere with lower nibble (upper LED bar)
  c4:	da 9a       	sbi	0x1b, 2	; 27
	
    uint8_t count = 0;
  c6:	10 e0       	ldi	r17, 0x00	; 0
	//uint8_t pot_value = 0;
    while(1)
    {
		led_bar.SetBarMeter(count);
  c8:	61 2f       	mov	r22, r17
  ca:	70 e0       	ldi	r23, 0x00	; 0
  cc:	ce 01       	movw	r24, r28
  ce:	01 96       	adiw	r24, 0x01	; 1
  d0:	0e 94 37 00 	call	0x6e	; 0x6e <_ZN11LedBarMeter11SetBarMeterEi>
	    count += 1;
  d4:	1f 5f       	subi	r17, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d6:	83 ec       	ldi	r24, 0xC3	; 195
  d8:	99 e0       	ldi	r25, 0x09	; 9
  da:	01 97       	sbiw	r24, 0x01	; 1
  dc:	f1 f7       	brne	.-4      	; 0xda <main+0x2c>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <main+0x32>
  e0:	00 00       	nop
  e2:	f2 cf       	rjmp	.-28     	; 0xc8 <main+0x1a>

000000e4 <_exit>:
  e4:	f8 94       	cli

000000e6 <__stop_program>:
  e6:	ff cf       	rjmp	.-2      	; 0xe6 <__stop_program>
