
Microcontroller_Labor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000da  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000012e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000012e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000160  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000877  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006fb  00000000  00000000  00000a63  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000305  00000000  00000000  0000115e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  00001464  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000042b  00000000  00000000  000014dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000e7  00000000  00000000  00001907  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000019ee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 51 00 	call	0xa2	; 0xa2 <main>
  64:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <_ZN11LedBarMeterC1Ev>:
LedBarMeter::LedBarMeter()
{
} //LedBarMeter

// default destructor
LedBarMeter::~LedBarMeter()
  6c:	08 95       	ret

0000006e <_ZN11LedBarMeter11SetBarMeterEi>:
} //~LedBarMeter


void LedBarMeter::SetBarMeter(int count)
{
	if (count < 51) {
  6e:	63 33       	cpi	r22, 0x33	; 51
  70:	71 05       	cpc	r23, r1
  72:	14 f4       	brge	.+4      	; 0x78 <_ZN11LedBarMeter11SetBarMeterEi+0xa>
		PORTA = 0b0000 << 4;
  74:	1b ba       	out	0x1b, r1	; 27
  76:	08 95       	ret
	}
	else if (count < 102) {
  78:	66 36       	cpi	r22, 0x66	; 102
  7a:	71 05       	cpc	r23, r1
  7c:	1c f4       	brge	.+6      	; 0x84 <_ZN11LedBarMeter11SetBarMeterEi+0x16>
		PORTA = 0b0001 << 4;
  7e:	80 e1       	ldi	r24, 0x10	; 16
  80:	8b bb       	out	0x1b, r24	; 27
  82:	08 95       	ret
	}
	else if (count < 153) {
  84:	69 39       	cpi	r22, 0x99	; 153
  86:	71 05       	cpc	r23, r1
  88:	1c f4       	brge	.+6      	; 0x90 <_ZN11LedBarMeter11SetBarMeterEi+0x22>
		PORTA = 0b0011 << 4;
  8a:	80 e3       	ldi	r24, 0x30	; 48
  8c:	8b bb       	out	0x1b, r24	; 27
  8e:	08 95       	ret
	}
	else if (count < 204) {
  90:	6c 3c       	cpi	r22, 0xCC	; 204
  92:	71 05       	cpc	r23, r1
  94:	1c f4       	brge	.+6      	; 0x9c <_ZN11LedBarMeter11SetBarMeterEi+0x2e>
		PORTA = 0b0111 << 4;
  96:	80 e7       	ldi	r24, 0x70	; 112
  98:	8b bb       	out	0x1b, r24	; 27
  9a:	08 95       	ret
	}
	else {
		PORTA = 0b1111 << 4;
  9c:	80 ef       	ldi	r24, 0xF0	; 240
  9e:	8b bb       	out	0x1b, r24	; 27
  a0:	08 95       	ret

000000a2 <main>:
#include "PortControl.h"
#include "LedBarMeter.h"


int main(void)
{
  a2:	cf 93       	push	r28
  a4:	df 93       	push	r29
  a6:	1f 92       	push	r1
  a8:	cd b7       	in	r28, 0x3d	; 61
  aa:	de b7       	in	r29, 0x3e	; 62
	// set LEDs to output
	DDRA = 0xF0; // set upper nibble to write, lower nibble to read
  ac:	80 ef       	ldi	r24, 0xF0	; 240
  ae:	8a bb       	out	0x1a, r24	; 26
	//PORTA |= (1 << PA0); // set Port A's Pin 0 to read
	
	LedBarMeter led_bar = LedBarMeter();
  b0:	ce 01       	movw	r24, r28
  b2:	01 96       	adiw	r24, 0x01	; 1
  b4:	0e 94 36 00 	call	0x6c	; 0x6c <_ZN11LedBarMeterC1Ev>
	
    uint8_t count = 0;
  b8:	10 e0       	ldi	r17, 0x00	; 0
	//uint8_t pot_value = 0;
    while(1)
    {
		led_bar.SetBarMeter(count);
  ba:	61 2f       	mov	r22, r17
  bc:	70 e0       	ldi	r23, 0x00	; 0
  be:	ce 01       	movw	r24, r28
  c0:	01 96       	adiw	r24, 0x01	; 1
  c2:	0e 94 37 00 	call	0x6e	; 0x6e <_ZN11LedBarMeter11SetBarMeterEi>
	    count += 1;
  c6:	1f 5f       	subi	r17, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c8:	83 ec       	ldi	r24, 0xC3	; 195
  ca:	99 e0       	ldi	r25, 0x09	; 9
  cc:	01 97       	sbiw	r24, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <main+0x2a>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <main+0x30>
  d2:	00 00       	nop
  d4:	f2 cf       	rjmp	.-28     	; 0xba <main+0x18>

000000d6 <_exit>:
  d6:	f8 94       	cli

000000d8 <__stop_program>:
  d8:	ff cf       	rjmp	.-2      	; 0xd8 <__stop_program>
